service: uffs-bot-backend

useDotenv: true

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-east-1 
  environment:
    SNS_TOPIC_ARN: ${ssm:uffs-bot-developers-topic-arn}
    ContactUsIntent: ${env:ContactUsIntent}
    GetContactIntent: ${env:GetContactIntent}
    ScheduleIntent: ${env:ScheduleIntent}
    GetDocumentsIntent: ${env:GetDocumentsIntent}
    GetNewsIntent: ${env:GetNewsIntent}
    LEX_BOT_ID: ${env:BOT_ID}
    LEX_ALIAS_ID: ${env:BOT_ALIAS_ID}
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
    CC_API_BASE_URL: ${env:CC_API_BASE_URL}
    SIGN_IN_LAMBDA: ${env:SIGN_IN_LAMBDA}
    AUTH_API_URL: ${env:AUTH_API_URL}
    DYNAMO_DB_USERS_TABLE: ${ssm:uffs-bot-users-table-name}
    BUCKET_NAME: ${ssm:uffs-bot-auth-bucket-name}
    FOLDER_NAME: ${env:FOLDER_NAME}
    NEWS_TABLE_NAME: ${env:NEWS_TABLE_NAME}
    
  iam:
    role:
      name: role-for-middleware-lambda-lex-bot
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.DYNAMO_DB_USERS_TABLE}
        - Effect: Allow
          Action: lambda:InvokeFunction
          Resource: "*"
        - Effect: Allow
          Action: sns:Publish
          Resource: ${self:provider.environment.SNS_TOPIC_ARN}
        - Effect: Allow
          Action: lex:*
          Resource: '*'
        - Effect: Allow
          Action:
            - lex:RecognizeText
            - lex:StartConversation
          Resource: ${env:TELEGRAM_ARN}

functions:
  contactUsIntent:
    handler: handlers/contact_us.handle_contact_us_intent
  
  getDocumentsIntent:
    handler: handlers/get_documents.handle_get_documents_intent

  newsIntent:
    handler: handlers/news.handle_news_intent

  router:
    handler: router.handle_router

  getContactIntent:
    handler: handlers/get_contact.handle_get_contact_intent
  
  getScheduleIntent:
    handler: handlers/get_schedule.handle_get_schedule_intent
    
  telegramToLex:
    handler: middleware/telegramToLex.telegram_handler
    events:
      - http:
          path: telegram-webhook
          method: POST
          cors: true

plugins:
  - serverless-offline
  - serverless-python-requirements