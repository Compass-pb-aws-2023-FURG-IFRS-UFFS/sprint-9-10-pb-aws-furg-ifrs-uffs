service: equitalk-api
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1 
  environment:
    BUCKET_NAME: ${env:BUCKET_NAME}
    PRINCIPAL_ARN: ${env:PRINCIPAL_ARN}
  iam:
    role:
      name: role-for-equitalk-app
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectAttributes
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${env:BUCKET_NAME}/*
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
            - polly:SynthesizeSpeech
            - rekognition:DetectText
          Resource: "*"
resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
    
    MyBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: MyS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
                    - "/*"
            - Effect: Allow
              Principal:
                AWS: ${env:PRINCIPAL_ARN}
              Action: s3:PutObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
                    - "/*"

functions:
  textToSpeech:
    handler: controllers/textToSpeech.textToSpeech
    events:
      - http:
          path: /textToSpeech
          method: post
  speechToText:
    handler: controllers/speechToText.speechToText
    events:
      - http:
          path: /speechToText
          method: post
  imageToSpeech:
    handler: controllers/imageToSpeech.imageToSpeech
    events:
      - http:
          path: /imageToSpeech
          method: post
  imageToText:
    handler: controllers/imageToText.imageToText
    events:
      - http:
          path: /imageToText
          method: post

plugins:
  - serverless-offline
custom:
  serverless-offline:
    host: '127.0.0.1'